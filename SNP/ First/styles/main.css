@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями и видео
 */
img,
video {
  display: block;
  max-width: 100%;
  height: auto;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Убираем скачок интерфейса по горизонтали
    при появлении / исчезновении скроллбара
   */
  scrollbar-gutter: stable;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Нормализация высоты элемента ссылки при его инспектировании в DevTools
 */
a:where([class]) {
  display: inline-flex;
}

/**
  Курсор-рука при наведении на элемент
 */
button,
label {
  cursor: pointer;
}

/**
  Приводим к единому цвету svg-элементы
 */
[fill] {
  fill: currentColor;
}

[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@font-face {
  font-family: "Roboto-Bold";
  src: url("../fonts/Roboto-Bold.woff2") format("woff2");
  font-weight: 700;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Roboto-Medium";
  src: url("../fonts/Roboto-Medium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Roboto-Regular";
  src: url("../fonts/Roboto-Regular.woff2") format("woff2");
  font-weight: 400;
  font-style: normal;
  font-display: swap;
}
:root {
  --color-black: #1B1F2B;
  --color-white: #FFFFFF;
  --color-orange-200: #EFA501;
  --color-orange-100: #F8E6BE;
  --color-green-400: #286562;
  --color-green-300: #3B7E7B;
  --color-green-200: #627F7E;
  --color-green-100: #E0F0E5;
  --color-gray-300: #A6A6A6;
  --color-gray-200: #D9DFDB;
  --color-gray-100: #F1F3F2;
  --color-beige-200: #F4F0E9;
  --color-beige-100: #F9F7F4;
  --gradient1: linear-gradient(
    360deg,
    rgba(0, 0, 0, 0.4) 0%,
    rgba(0, 0, 0, 0.06) 48.44%,
    rgba(0, 0, 0, 0.5) 100%);
  --gradient2: linear-gradient(
    270deg,
    rgba(0, 0, 0, 0) 0.01%,
    rgba(0, 0, 0, 0.2) 100%);
  --gradient0:
    linear-gradient(0deg, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)),
    linear-gradient(180deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0) 39.9%);
}

html.is-lock {
  overflow: hidden;
}

body {
  font-family: "Roboto-Regular", sans-serif;
  font-weight: 400;
  font-size: 20px;
  line-height: 142%;
}
@media (width <= 22.49875rem) {
  body {
    font-family: "Roboto-Regular", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 142%;
  }
}
body {
  display: flex;
  flex-direction: column;
  background-color: var(--color-white);
}

main {
  flex-grow: 1;
}

a,
label,
button,
input,
textarea,
select,
svg * {
  text-decoration: var(--transion-duration);
}

a {
  color: inherit;
}
@media (any-hover: hover) {
  a:hover {
    text-decoration: underline;
  }
}
@media (any-hover: none) {
  a:active {
    text-decoration: underline;
  }
}
a[class] {
  text-decoration: none;
}

/*# sourceMappingURL=main.css.map */
